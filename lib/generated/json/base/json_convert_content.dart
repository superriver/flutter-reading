// ignore_for_file: non_constant_identifier_names
// ignore_for_file: camel_case_types
// ignore_for_file: prefer_single_quotes

// This file is automatically generated. DO NOT EDIT, all your changes would be lost.
import 'package:flutter_reading/model/article_entity.dart';
import 'package:flutter_reading/generated/json/article_entity_helper.dart';
import 'package:flutter_reading/model/girl_entity.dart';
import 'package:flutter_reading/generated/json/girl_entity_helper.dart';
import 'package:flutter_reading/model/banner_entity.dart';
import 'package:flutter_reading/generated/json/banner_entity_helper.dart';
import 'package:flutter_reading/model/category_entity.dart';
import 'package:flutter_reading/generated/json/category_entity_helper.dart';

class JsonConvert<T> {
	T fromJson(Map<String, dynamic> json) {
		return _getFromJson<T>(runtimeType, this, json);
	}

  Map<String, dynamic> toJson() {
		return _getToJson<T>(runtimeType, this);
  }

  static _getFromJson<T>(Type type, data, json) {
    switch (type) {
			case ArticleEntity:
				return articleEntityFromJson(data as ArticleEntity, json) as T;
			case ArticleData:
				return articleDataFromJson(data as ArticleData, json) as T;
			case ArticleDetailModel:
				return articleDetailModelFromJson(data as ArticleDetailModel, json) as T;
			case ArticleDetailData:
				return articleDetailDataFromJson(data as ArticleDetailData, json) as T;
			case GirlEntity:
				return girlEntityFromJson(data as GirlEntity, json) as T;
			case GirlData:
				return girlDataFromJson(data as GirlData, json) as T;
			case BannerEntity:
				return bannerEntityFromJson(data as BannerEntity, json) as T;
			case BannerData:
				return bannerDataFromJson(data as BannerData, json) as T;
			case CategoryEntity:
				return categoryEntityFromJson(data as CategoryEntity, json) as T;
			case CategoryData:
				return categoryDataFromJson(data as CategoryData, json) as T;    }
    return data as T;
  }

  static _getToJson<T>(Type type, data) {
		switch (type) {
			case ArticleEntity:
				return articleEntityToJson(data as ArticleEntity);
			case ArticleData:
				return articleDataToJson(data as ArticleData);
			case ArticleDetailModel:
				return articleDetailModelToJson(data as ArticleDetailModel);
			case ArticleDetailData:
				return articleDetailDataToJson(data as ArticleDetailData);
			case GirlEntity:
				return girlEntityToJson(data as GirlEntity);
			case GirlData:
				return girlDataToJson(data as GirlData);
			case BannerEntity:
				return bannerEntityToJson(data as BannerEntity);
			case BannerData:
				return bannerDataToJson(data as BannerData);
			case CategoryEntity:
				return categoryEntityToJson(data as CategoryEntity);
			case CategoryData:
				return categoryDataToJson(data as CategoryData);
			}
			return data as T;
		}
  //Go back to a single instance by type
	static _fromJsonSingle<M>( json) {
		String type = M.toString();
		if(type == (ArticleEntity).toString()){
			return ArticleEntity().fromJson(json);
		}	else if(type == (ArticleData).toString()){
			return ArticleData().fromJson(json);
		}	else if(type == (ArticleDetailModel).toString()){
			return ArticleDetailModel().fromJson(json);
		}	else if(type == (ArticleDetailData).toString()){
			return ArticleDetailData().fromJson(json);
		}	else if(type == (GirlEntity).toString()){
			return GirlEntity().fromJson(json);
		}	else if(type == (GirlData).toString()){
			return GirlData().fromJson(json);
		}	else if(type == (BannerEntity).toString()){
			return BannerEntity().fromJson(json);
		}	else if(type == (BannerData).toString()){
			return BannerData().fromJson(json);
		}	else if(type == (CategoryEntity).toString()){
			return CategoryEntity().fromJson(json);
		}	else if(type == (CategoryData).toString()){
			return CategoryData().fromJson(json);
		}	
		return null;
	}

  //list is returned by type
	static M _getListChildType<M>(List data) {
		if(<ArticleEntity>[] is M){
			return data.map<ArticleEntity>((e) => ArticleEntity().fromJson(e)).toList() as M;
		}	else if(<ArticleData>[] is M){
			return data.map<ArticleData>((e) => ArticleData().fromJson(e)).toList() as M;
		}	else if(<ArticleDetailModel>[] is M){
			return data.map<ArticleDetailModel>((e) => ArticleDetailModel().fromJson(e)).toList() as M;
		}	else if(<ArticleDetailData>[] is M){
			return data.map<ArticleDetailData>((e) => ArticleDetailData().fromJson(e)).toList() as M;
		}	else if(<GirlEntity>[] is M){
			return data.map<GirlEntity>((e) => GirlEntity().fromJson(e)).toList() as M;
		}	else if(<GirlData>[] is M){
			return data.map<GirlData>((e) => GirlData().fromJson(e)).toList() as M;
		}	else if(<BannerEntity>[] is M){
			return data.map<BannerEntity>((e) => BannerEntity().fromJson(e)).toList() as M;
		}	else if(<BannerData>[] is M){
			return data.map<BannerData>((e) => BannerData().fromJson(e)).toList() as M;
		}	else if(<CategoryEntity>[] is M){
			return data.map<CategoryEntity>((e) => CategoryEntity().fromJson(e)).toList() as M;
		}	else if(<CategoryData>[] is M){
			return data.map<CategoryData>((e) => CategoryData().fromJson(e)).toList() as M;
		}
		throw Exception("not fond");
	}

  static M fromJsonAsT<M>(json) {
    if (json is List) {
      return _getListChildType<M>(json);
    } else {
      return _fromJsonSingle<M>(json) as M;
    }
  }
}